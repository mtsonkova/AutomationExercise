Task 1: Validate User Registration Process  => UI


Objective: Test the user registration flow. 

Steps:

    Navigate to the website.
    Click on the "Signup / Login" link.
    Enter a new email address and a name in the registration form.
    Fill in all required fields in the registration form.
    Submit the form and verify:
        The account is created successfully.
        A success message is displayed.
        The user is redirected to the correct page (e.g., their account dashboard).

Expected Output:

    The user should be successfully registered.
    The success message ("Account Created!") should be visible.

Task 2: Search and Add a Product to Cart: => UI

Objective: Test the search functionality and cart behavior.

Steps:

    Navigate to the website.
    Use the search bar to search for a specific product (e.g., "T-shirt"). // Search bar is visible on products page
    Verify that relevant search results are displayed.
    Click on a product and add it to the cart.
    Navigate to the cart page and verify:
        The product details (e.g., name, price) match the selected product.
        The quantity is correct.

Expected Output:

    Search results should match the query.
    The product added to the cart should match the selected product.
    The cart details should reflect the correct information.

Task 3: Test Login and Logout Functionality => UI

Objective: Validate the login and logout processes.

Steps:

    Navigate to the website.
    Click on the "Signup / Login" link.
    Enter valid login credentials (use a pre-existing account).
    Verify:
        The user is logged in successfully.
        The correct username is displayed.
    Logout by clicking on the logout button.
    Verify:
        The user is logged out successfully.
        The "Signup / Login" link is visible again.

Expected Output:

    The user should be logged in successfully with the username displayed.
    After logging out, the user should be redirected to the homepage, and the "Signup / Login" link should appear.




    Will pay attention to 
1. POM
2. Error handling
3. Positive flow
4. Negative flow
5. Error handling



const emailInput = page.locator('[data-qa="login-email"]');

// Assert that the input is invalid (which triggers the tooltip)
await expect(emailInput).toHaveJSProperty('validationMessage', 'Please fill out this field.');

// POST To Verify Login with valid details
// Post to verify login with invalid details
// POST to Create/Register User Account
// POST to Search product endpoint
// DELETE METHOD TO DELETE USER ACCOUNT


login -> UI
register -> API
